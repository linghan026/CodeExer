package newcoder.nc;

import org.junit.Test;

/**
 * NC110	旋转数组
 * 答案仍有错误
 * @author Linghan 2021/4/14 20:35
 */
public class NC110 {
    /**
     * 旋转数组
     * @param n int整型 数组长度
     * @param m int整型 右移距离
     * @param a int整型一维数组 给定数组
     * @return int整型一维数组
     */
    public int[] solve (int n, int m, int[] a) {
        // write code here
        if(n < m)
            m= m%n;
        if(m==0)
            return a;

        if(n%m == 0){//如果移动距离是长度的倍数
            int pre, temp;
            for(int j=0;j<m;j++){
                pre = a[j];//移动一轮后 临时变量里的值重置 为第二个数
                for (int i = j; i < n; i = i + m) {
                    int nex = (i + m) % n;
                    temp = a[nex];
                    a[nex] = pre;
                    pre = temp;
                }
            }
        }
        else//如果移动距离不是长度的倍数
        {
            int pre, temp,count=0;
            pre = a[0];
            int i,nex;
            for(int j=0;j<m;j=i-n){ //j=i-n 是移动一轮后最后被替换掉的数字 进入下一轮继续移动
                for (i = j; i < n; i = i + m) {//交换至目标位置回到开头
                    nex = (i + m) % n;//目标位置回到开头时 取余防止索引出界 再交换一次
                    temp = a[nex];
                    a[nex] = pre;
                    pre = temp;
                    count++;
                    if(count == n)
                        return a;
                }

            }
        }
        return a;

    }

    @Test
    public void test(){
        /*
         * √ 6,7,[1,2,3,4,5,6]
         * √ 1,5,[5]
         * √ 6,0,[3,5,2,6,3,0]
         * √ 100,1000,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]
         * × 100,99,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]
         * √ 100,102,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]
         * × 100,213,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]
         */
        int[] a={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
        for (int i = 0; i <100; i++) {
            a=solve(100,i,a);
            for (int j : a) {
                System.out.print(j + ",");
            }
            System.out.println();

        }

    }
}
